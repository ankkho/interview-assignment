scalar Date
scalar DateTime

enum days {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

input itemDetailsAttr {
  id: Int
  qty: Int
}

input items {
  dishName: String
  price: Float
}

type restaurantDetailsForMenu {
  id: Int,
  name: String,
}

type restaurantDetails {
  id: Int
  name: String
}

input newOrderAttr {
  userId: Int,
  restaurantId: Int,
  itemDetails: [itemDetailsAttr],
}

type orderDetails {
  transactionId: String
  orderNumber: String
  status: String
  createdAt: DateTime
}

type newOrderAttrResp {
  message: String
  data: orderDetails
}

type getRestaurants {
  restaurantId: Int
  from: String
  to: String
  day: [days]
  restaurant: restaurantDetails
}

type userDetails {
  id: Int
  name: String
  cashBalance: Float
}

type menuDetails {
  id: Int,
  dishName: String,
  price: Float,
  restaurant: restaurantDetailsForMenu
}

type Query {
  pingQuery: String
  searchRestaurantQuery(query: String!, limit: Int!, offset: Int!): [restaurantDetails]
  searchMenuQuery(query: String!): [menuDetails]
  getRestaurantsQuery(dateTime: DateTime!): [getRestaurants]
  searchMenuByPriceRangeQuery(maxPrice: Int!, minPrice: Int!): [menuDetails]
}

type Mutation {
  newOrderMutation(newOrderParams: newOrderAttr): newOrderAttrResp
}